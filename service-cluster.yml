AWSTemplateFormatVersion: "2010-09-09"
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: "Certicicate ARN"
        Parameters:
          - AcmCertificate
      - 
        Label:
          default: "Export VPC Stack Name"
        Parameters:
          - ExportVpcStackName 
      
Parameters:

  # SubnetIdForALB:
  #   Description: Please select the subnet IDs where you want to put your ALB. They should be public
  #   Type: 'List<AWS::EC2::Subnet::Id>'

  SubnetIdForContainer:
    Description: Please select the subnet IDs where you want to put your containers. They should be private
    Type: 'List<AWS::EC2::Subnet::Id>'

  ExportVpcStackName:
    Description: Bring out the name of the VPC in the stack created before
    Type: String

  AcmCertificate:
    Description: Name of the certification Manager
    Type: 'AWS::SSM::Parameter::Value<String>' 
    Default: lion-cluster-certificate-2

  LionContainerImage:                                  # Added during presentation
      Type: 'AWS::SSM::Parameter::Value<String>' 
      Default: /lioncontainerimageURI
  LionContainerName:
    Type: String
    Description: Name of app requiring ELB exposure
    Default: Lion-container
  LionContainerPort:
    Type: Number
    Description: Container port of app requiring ELB exposure
    Default: '80'
  # LionAccoundID:                                  # Added during presentation
  #     Type: 'AWS::SSM::Parameter::Value<String>' 
  #     Default: /LionAccountID

  # CloudFrontdistribution:
  #   Type: 'AWS::SSM::Parameter::Value<String>'
  #   Description: This is the cloudfront distro
  #   Default: /CloudFrontDistribution

  # CloudFrontdistributionDomainName:
  #   Type: 'AWS::SSM::Parameter::Value<String>'
  #   Description: This is the cloudfront distribution domaine name
  #   Default: /CloudfrontDomaineName

  MyHostedZoneId:
    Type: 'AWS::SSM::Parameter::Value<String>'
    Default: /MyHostedZoneID
  
Resources:
  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: Lion-Nasfinancial-cluster

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: Lion-Nasfinancial-loggroup

  LionExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName:  Lion-NasfinancialECSTask-role
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy



  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: LionNasTask
      Cpu: 256
      Memory: 512
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref LionExecutionRole
      ContainerDefinitions:
        - Name: !Ref LionContainerName
          Image: !Ref LionContainerImage
          PortMappings:
            - ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
      RuntimePlatform:
        CpuArchitecture: X86_64
        OperatingSystemFamily: LINUX
      RequiresCompatibilities:
        - EC2
        - FARGATE

  Service:
    Type: AWS::ECS::Service
    DependsOn: ALBListenerSslCertificate
    Properties:
      ServiceName:  lion-nasfinancial-service
      Cluster: !Ref Cluster
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      HealthCheckGracePeriodSeconds: 300
      LoadBalancers:
        - ContainerName: !Ref LionContainerName
          ContainerPort: !Ref LionContainerPort
          # LoadBalancerName: !Ref ApplicationLoadBalancer
          TargetGroupArn: !Ref ALBTargetGroup
      SchedulingStrategy: REPLICA
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          Subnets: !Ref SubnetIdForContainer
          SecurityGroups:
            - Fn::ImportValue: !Sub '${ExportVpcStackName}-ContainerSecurityGroup'
      Tags:
        - Key: Name 
          Value: lion-nasfinancial-service 


  ECSAutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    DependsOn: Service
    Properties:
      MaxCapacity: 4
      MinCapacity: 1
      ResourceId: "service/Lion-Nasfinancial-cluster/lion-nasfinancial-service"
      RoleARN: !GetAtt LionExecutionRole.Arn
      ScalableDimension: "ecs:service:DesiredCount"
      ServiceNamespace: "ecs"

  ECSAutoScalingPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: ecs-scaling-policy
      PolicyType: TargetTrackingScaling
      ScalingTargetId: !Ref ECSAutoScalingTarget
      TargetTrackingScalingPolicyConfiguration:
        PredefinedMetricSpecification:
          PredefinedMetricType: ECSServiceAverageCPUUtilization
        ScaleInCooldown: 300
        ScaleOutCooldown: 300
        TargetValue: 70                         
   


  ApplicationLoadBalancer:  # Creation of the Application Load Balancer
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      Name: Lion-NAS-ALB
      SecurityGroups:
        - Fn::ImportValue: !Sub '${ExportVpcStackName}-ALBSecurityGroup'
      Subnets:
        - Fn::ImportValue: !Sub '${ExportVpcStackName}-PublicSubnet1'
        - Fn::ImportValue: !Sub '${ExportVpcStackName}-PublicSubnet2'
  ALBListenerNoSslCertificate:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties: 
      DefaultActions:
        - RedirectConfig: 
            Host: '#{host}'
            Path: '/#{path}'
            Port: '443'
            Protocol: HTTPS 
            StatusCode: HTTP_301
          Type: redirect
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP

  ALBListenerSslCertificate:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      Certificates:
        - CertificateArn: !Ref AcmCertificate
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 443
      Protocol: HTTPS      

  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties: 
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /
      HealthCheckTimeoutSeconds: 10
      # HealthyThreshholdCount: 2
      Matcher: 
        HttpCode: 200,302
      Protocol:  HTTP 
      Name: 'lion-nasfinancial-service'
      Port: 80
      TargetType: ip   
      UnhealthyThresholdCount: 5
      VpcId: 
        Fn::ImportValue: !Sub '${ExportVpcStackName}-VPCID' 

  myDNSrecord: 
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: myaws2022lab.com.  # put this in the parameter
      Comment:  alias targeted to my LoadBalancer.
      RecordSets:
      - Name: lion.myaws2022lab.com.  # Put in this parameter and call it. 
        Type: A
        AliasTarget:
          HostedZoneId: !GetAtt 'ApplicationLoadBalancer.CanonicalHostedZoneID' #!Ref MyHostedZoneId  #!Sub "Z${ ApplicationLoadBalancer.CanonicalHostedZoneID}"
          DNSName: !GetAtt 'ApplicationLoadBalancer.DNSName'
        SetIdentifier: "us-east-2"  # SetIdentifier to specify the geographic region
        GeoLocation:
          #ContinentCode: NA  # Continent code to specify North America
          CountryCode: US   # Country code to specify United States
      - Name: lion.myaws2022lab.com.
        Type: A
        AliasTarget:
          HostedZoneId: !Ref MyHostedZoneId   # There is always only one value of HostedzoneID to be used when directing traffic to CloudFront. Provided in AWS documentation 
          DNSName: !ImportValue DistroDnsName
        SetIdentifier: "default" # SetIdentifier for the default redirect
        GeoLocation:
          CountryCode: "*"   # Wildcard to match all other countries
    
Outputs:
  ALBTargetGroup:
    Description: ALB Target group 
    Export:
      Name: !Sub '${AWS::StackName}-ALBTargetGroup'
    Value: !Ref ALBTargetGroup  

  ApplicationLoadBalancerDnsName:
    Description: ALB DNS Name 
    Export:
      Name: !Sub '${AWS::StackName}-ApplicationLoadBalancerDnsName'
    Value: !GetAtt ApplicationLoadBalancer.DNSName

  ApplicationLoadBalancerZoneID:
    Description: ALB Zone ID
    Export:
      Name: !Sub '${AWS::StackName}-ApplicationLoadBalancerZoneID'
    Value: !GetAtt ApplicationLoadBalancer.CanonicalHostedZoneID   

  outputWebserverDNSName:
    Description: DNS A record name of the website
    Value: !Join [ "", [ "https://",lion.myaws2022lab.com ] ] # return the Name of the DNS A record 